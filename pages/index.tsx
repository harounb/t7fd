import {useState} from "react";
import Head from "next/head";
import Image from "next/image";
import { Source_Code_Pro } from "@next/font/google";

const sourceCodePro = Source_Code_Pro({ subsets: ["latin"] });

type RawGithubMove = {
  Alias: string[];
  "Block frame": string;
  Command: string;
  "Counter hit frame": string;
  Damage: string;
  Gif: string;
  "Hit frame": string;
  "Hit level": string;
  Notes: string;
  "Start up frame": string;
  Tags: string[];
};

type Move = {
  alias: string[];
  blockFrame: string;
  command: string;
  damage: string;
  gif: string;
  hitFrame: string;
  hitLevel: string;
  notes: string;
  startUpFrame: string;
  tags: string[];
};

const rawGithubMoveToMove = (rawGithubMove: RawGithubMove): Move => ({
  alias: rawGithubMove.Alias,
  blockFrame: rawGithubMove["Block frame"],
  command: rawGithubMove.Command,
  damage: rawGithubMove.Damage,
  gif: rawGithubMove.Gif,
  hitFrame: rawGithubMove["Hit frame"],
  hitLevel: rawGithubMove["Hit level"],
  notes: rawGithubMove.Notes,
  startUpFrame: rawGithubMove["Start up frame"],
  tags: rawGithubMove.Tags,
});

export async function getServerSideProps() {
  const response = await fetch(
    "https://raw.githubusercontent.com/harounb/mokujin/master/json/hwoarang.json"
  );
  const data = await response.json();

  // Pass data to the page via props
  return {
    props: { data: JSON.parse(JSON.stringify(data.map(rawGithubMoveToMove))) },
  };
}

const Column: Record<string, keyof Move> = {
  ALIAS: "alias",
  BLOCK_FRAME: "blockFrame",
  COMMAND: "command",
  DAMAGE: "damage",
  GIF: "gif",
  HIT_FRAME: "hitFrame",
  HIT_LEVEL: "hitLevel",
  NOTES: "notes",
  START_UP_FRAME: "startUpFrame",
  TAGS: "tags"
}

const ColumnDisplayName = {
  [Column.ALIAS]: "Alias",
  [Column.BLOCK_FRAME]: "Block frame",
  [Column.COMMAND]: "Command",
  [Column.DAMAGE]: "Damage",
  [Column.GIF]: "Gif",
  [Column.HIT_FRAME]: "Hit frame",
  [Column.HIT_LEVEL]: "Hit level",
  [Column.NOTES]: "Notes",
  [Column.START_UP_FRAME]: "Start up",
  [Column.TAGS]: "Tags"
}

const columnOrder = [Column.COMMAND, Column.HIT_LEVEL, Column.DAMAGE, Column.START_UP_FRAME, Column.BLOCK_FRAME, Column.HIT_FRAME, Column.NOTES ];

const defaultDisplayedColumns = [Column.COMMAND, Column.START_UP_FRAME, Column.BLOCK_FRAME, Column.HIT_FRAME]

export default function Home({ data }: { data: Move[] }) {
  const [displayedColumns, setDisplayedColumns] = useState(defaultDisplayedColumns);
  const createHandleChange = (columnKey: keyof Move) => () => {
    if(displayedColumns.find(displayedColumnKey => displayedColumnKey === columnKey)) {
      setDisplayedColumns(displayedColumns.filter(displayedColumns => displayedColumns !== columnKey));
    } else {
      setDisplayedColumns([...displayedColumns, columnKey])
  }
  }

  const isColumnKey = (key: string) : key is keyof Move => {
    return Object.values(Column).some((columnKey) => columnKey === key);
  }
  const columnIsDisplayed = (column: string) : boolean => {
    if(!isColumnKey(column)) {
      return false;
    }
    return displayedColumns.some(displayedColumns => displayedColumns === column)
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={`${sourceCodePro.className} flex text-stone-50 bg-gray-800`}>
        <aside className="w-80 p-4 shrink-0">
          <h1 className="text-2xl pb-2 font-bold">Tekken 7 Frame Data</h1>
          <h2 className="text-xl pb-8">Hwoarang</h2>
          <fieldset>
            <legend>Columns</legend>
            {columnOrder.map((column) => (<div key={column}>
              <input type="checkbox" id={`column-${column}`} name={`column-${column}`} checked={columnIsDisplayed(column)} onChange={createHandleChange(column)}/>
              <label htmlFor={`column-${column}`}>{ColumnDisplayName[column]}</label>
            </div>))}
          </fieldset>
        </aside>
        <main className="max-h-screen overflow-scroll pt-4">
          <table>
            <thead>
              <tr>
                {columnOrder.filter(columnIsDisplayed).map((columnKey) => (<th className="p-2" key={columnKey}>{ColumnDisplayName[columnKey]}</th>))}
              </tr>
            </thead>
            <tbody>
              {data.map((move, index) => {
                const moveKeys = Object.keys(move).filter(isColumnKey);
                return (
                  <tr
                    className={`${
                      index % 2 === 0 ? "bg-gray-700" : "bg-gray-600"
                    } hover:bg-gray-400`}
                    key={JSON.stringify(move)}
                  >
                    {columnOrder.filter(columnIsDisplayed).map((moveKey) => 
                      <td className="p-2" key={`move-${move.command}-key-${moveKey}`}>{move[moveKey]}</td>
                    )}
                    {/* I think I got blocked from gfycat cos of this line <td>{move.gif && <img src={move.gif} /> }</td> */}
                  </tr>
                );
              })}
            </tbody>
          </table>
        </main>
      </div>
    </>
  );
}
